from odoo import api, fields, models


class DocumentsDocument(models.Model):
    _inherit = "documents.document"

    customer_journal_id = fields.Many2one(
        "account.journal",
        default=lambda self: self.env["account.move"]
        .with_context(default_move_type="out_invoice")
        ._get_default_journal(),
        domain=lambda self: [("type", "=", "sale"), ("company_id", "in", (self.company_id | self.env.company).ids)],
        help="This journal will be used in the customer invoices generated by this document.",
    )
    vendor_journal_id = fields.Many2one(
        "account.journal",
        default=lambda self: self.env["account.move"]
        .with_context(default_move_type="in_invoice")
        ._get_default_journal(),
        domain=lambda self: [
            ("type", "=", "purchase"),
            ("company_id", "in", (self.company_id | self.env.company).ids),
        ],
        help="This journal will be used in the vendor bills generated by this document.",
    )
    customer_account_id = fields.Many2one(
        "account.account",
        domain=lambda self: [("company_id", "in", (self.company_id | self.env.company).ids)],
        help="This account will be used in the customer invoices generated by this document. If this account is not "
        "set, will be used the default account.",
    )
    vendor_account_id = fields.Many2one(
        "account.account",
        domain=lambda self: [("company_id", "in", (self.company_id | self.env.company).ids)],
        help="This account will be used in the vendor bills generated by this document. If this account is not set, "
        "will be used the default account.",
    )
    invoice_date = fields.Date(
        help="Date to be used in the invoice to generate, if is empty will be used the CFDI date."
    )
    in_finance_folder = fields.Boolean(
        compute="_compute_show_fields", store=True, help="Indicates if document is in finance folder"
    )
    show_customer_fields = fields.Boolean(compute="_compute_show_fields", store=True)
    analytic_group = fields.Boolean(compute="_compute_show_fields", store=True)
    analytic_account_id = fields.Many2one(
        "account.analytic.account", help="Analytic account to be used in the " "invoices to generate."
    )

    just_downloaded = fields.Boolean(
        compute="_compute_just_downloaded",
        search="_search_just_downloaded",
        store=False,
        help="""Used to identify the just donwloaded attachments.
            To evaluate if an attachment was just downloaded, we need to
            check the current context.""",
    )

    def _compute_just_downloaded(self):
        downloaded_ids = self._context.get("downloaded_invoice", [])
        for rec in self:
            rec.just_downloaded = rec.id in downloaded_ids

    def _search_just_downloaded(self, operator, value):
        operator = "in" if value else "not int"
        return [("id", operator, self._context.get("downloaded_invoice", []))]

    @api.depends("folder_id")
    def _compute_show_fields(self):
        folders = self.env.ref("documents.documents_finance_folder")
        folders |= folders.children_folder_ids
        for record in self:
            record.in_finance_folder = record.folder_id in folders
            record.show_customer_fields = (record.company_id or self.env.company).l10n_mx_edi_import_customer_invoices
            record.analytic_group = self.user_has_groups("analytic.group_analytic_accounting")

    def get_tag_map(self, key):
        default = self.env["documents.tag"]
        values = {
            "I": self.env.ref("l10n_mx_edi_document.ingreso_tag"),
            "E": self.env.ref("l10n_mx_edi_document.egreso_tag"),
            "T": self.env.ref("l10n_mx_edi_document.translado_tag"),
            "P": self.env.ref("l10n_mx_edi_document.reception_tag"),
            "N": self.env.ref("l10n_mx_edi_document.nomina_tag"),
        }
        return values.get(key, default)

    @api.model
    def create(self, vals):
        xml_obj = self.env.context.get("xml_obj", False)

        if not xml_obj:
            return super().create(vals)

        tag_id = self.env.ref("l10n_mx_edi_document.without_invoice")
        xml_type = xml_obj.get("TipoDeComprobante", False)
        tags_type = self.get_tag_map(xml_type) | tag_id
        vals["tag_ids"] = [(6, 0, tags_type.ids)]

        return super().create(vals)
