from odoo import _, fields, models


class WorkflowActionRule(models.Model):
    _inherit = "documents.workflow.rule"

    customer_journal_id = fields.Many2one(
        "account.journal",
        default=lambda self: self.env["account.move"]
        .with_context(default_move_type="out_invoice")
        ._get_default_journal(),
        help="This journal will be used in the customer " "invoices generated by this document.",
    )
    vendor_journal_id = fields.Many2one(
        "account.journal",
        default=lambda self: self.env["account.move"]
        .with_context(default_move_type="in_invoice")
        ._get_default_journal(),
        help="This journal will be used in the vendor " "bills generated by this document.",
    )
    customer_account_id = fields.Many2one(
        "account.account",
        help="This account will be used in the customer invoices generated by this document. If "
        "this account is not set, will be used the default account.",
    )
    vendor_account_id = fields.Many2one(
        "account.account",
        help="This account will be used in the vendor bills generated by this document. If this "
        "account is not set, will be used the default account.",
    )
    invoice_date = fields.Date(
        help="Date to be used in the invoice to generate, if is empty will be used the CFDI date."
    )
    analytic_account_id = fields.Many2one(
        "account.analytic.account", help="Analytic account to be used in the " "invoices to generate."
    )

    def _get_document_record(self, document, res_model, document_type, attachment):
        if res_model != "account.move":
            return super()._get_document_record(document, res_model, document_type, attachment)
        account = document.customer_account_id if "customer" in document_type else document.vendor_account_id
        if not account and not document.analytic_account_id:
            return super()._get_document_record(document, res_model, document_type, attachment)
        body = _("<p>created with DMS</p>")
        create_values = {
            "l10n_edi_created_with_dms": True,
        }
        create_values.update(self._prepare_invoice_data(document_type, document))
        result = self.env[res_model].create(create_values)
        attachment.mimetype = "application/xml"
        result.with_context(no_new_invoice=True).message_post(body=body, attachment_ids=[attachment.id])
        document.toggle_active()
        this_attachment = attachment
        if attachment.res_model or attachment.res_id:
            this_attachment = attachment.copy()
            document.attachment_id = this_attachment.id
        this_attachment.write(
            {
                "res_model": res_model,
                "res_id": result.id,
            }
        )

        return result.xml2record(default_account=account.id, analytic_account=document.analytic_account_id.id)

    def _prepare_invoice_data(self, document_type, document):
        values = super()._prepare_invoice_data(document_type, document)
        # Update the invoice type in Emitter == Receiver
        # TODO - If is necessary add a system parameter to this case
        cfdi = document.attachment_id.l10n_mx_edi_is_cfdi33()
        if cfdi is not None and cfdi.Emisor.get("Rfc") == cfdi.Receptor.get("Rfc"):
            values["move_type"] = {"out_invoice": "in_invoice", "out_refund": "in_refund"}.get(values["move_type"])
        if values["move_type"] in ("out_invoice", "out_refund") and document.customer_journal_id:
            values["journal_id"] = document.customer_journal_id.id
        if values["move_type"] in ("in_invoice", "in_refund") and document.vendor_journal_id:
            values["journal_id"] = document.vendor_journal_id.id
        if document.invoice_date:
            values["invoice_date"] = document.invoice_date
        return values
